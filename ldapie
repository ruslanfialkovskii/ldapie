#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Main executable for the ldapie CLI.

This script handles import complexities for running ldapie
both as an installed package and directly from a development environment.
It also manages debug output and demo mode invocation.
"""

import os
import sys
import importlib.util

# Add the parent directory to the Python path if running from repository
parent_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, parent_dir)

# Also add src directory
src_dir = os.path.join(parent_dir, 'src')
if os.path.exists(src_dir):
    sys.path.insert(0, src_dir)

# Debug flag for detailed output
debug_mode = "--debug" in sys.argv

if debug_mode:
    print("Debug mode enabled")
    print(f"Current script path: {__file__}")
    print(f"Current directory: {os.getcwd()}")
    print(f"sys.path: {sys.path}")

# Try different import strategies
CLI = None

# Method 1: Try to import from standard path (installed package)
try:
    if debug_mode:
        print("Trying import: from ldapie.ldapie import cli")
    from ldapie.ldapie import cli as imported_cli
    CLI = imported_cli
    if debug_mode:
        print("Successfully imported from ldapie.ldapie")
except ImportError as e1:
    if debug_mode:
        print(f"Import error 1: {e1}")

    # Method 2: Try importing as module within package (development)
    try:
        if debug_mode:
            print("Trying import: from src.ldapie.ldapie import cli")
        from src.ldapie.ldapie import cli as imported_cli
        CLI = imported_cli
        if debug_mode:
            print("Successfully imported from src.ldapie.ldapie")
    except ImportError as e2:
        if debug_mode:
            print(f"Import error 2: {e2}")

        # Method 3: Direct file import using importlib
        try:
            script_path = os.path.join(src_dir, 'ldapie', 'ldapie.py')
            if debug_mode:
                print(f"Trying direct import from: {script_path}")

            if os.path.exists(script_path):
                spec = importlib.util.spec_from_file_location("ldapie.ldapie", script_path)
                if spec is None or spec.loader is None:
                    raise ImportError(f"Could not create spec for {script_path}") from e2
                ldapie_module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(ldapie_module)
                CLI = getattr(ldapie_module, 'cli')
                if debug_mode:
                    print("Successfully imported using importlib")
            else:
                if debug_mode:
                    print(f"File not found: {script_path}")
                raise ImportError(f"ldapie.py not found at {script_path}") from e2
        except ImportError as e3: # Changed from Exception to ImportError for more specificity
            if debug_mode:
                print(f"Import error 3: {e3}")

            print("Error: Could not import ldapie module. "
                  "Make sure it's installed or you're running from the correct directory.")
            if debug_mode:
                # List files in relevant directories for debugging
                print("\nContents of src directory:")
                if os.path.exists(src_dir):
                    for item in os.listdir(src_dir):
                        print(f" - {item}")

                print("\nContents of src/ldapie directory:")
                ldapie_dir = os.path.join(src_dir, 'ldapie')
                if os.path.exists(ldapie_dir):
                    for item in os.listdir(ldapie_dir):
                        print(f" - {item}")

            sys.exit(1)

if __name__ == "__main__":
    if CLI is not None:
        # Handle --demo flag directly in the wrapper script
        if "--demo" in sys.argv:
            try:
                # Import the demo module
                if debug_mode:
                    print("Trying to import and run demo from tests.demo")

                # First try direct path import
                demo_path = os.path.join(parent_dir, 'tests', 'demo.py')
                if debug_mode:
                    print(f"Looking for demo at: {demo_path}")

                if os.path.exists(demo_path):
                    if debug_mode:
                        print(f"Found demo at {demo_path}, importing...")
                    spec = importlib.util.spec_from_file_location("demo", demo_path)
                    if spec is None or spec.loader is None:
                        raise ImportError(f"Could not create spec for {demo_path}")
                    demo_module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(demo_module)
                    run_demo = getattr(demo_module, 'run_demo')
                    run_demo()
                else:
                    if debug_mode:
                        print(f"Demo file not found at {demo_path}")
                    print("Error: Could not find demo file at expected location.")
                    sys.exit(1)

                sys.exit(0)
            except ImportError as e: # Changed from Exception to ImportError
                if debug_mode:
                    print(f"Failed to run demo (ImportError): {e}")
                print(f"Error: Could not run demo module: {str(e)}")
                sys.exit(1)
            except AttributeError as e: # Added AttributeError for getattr issues
                if debug_mode:
                    print(f"Failed to run demo (AttributeError): {e}")
                print(f"Error: Could not find run_demo function in demo module: {str(e)}")
                sys.exit(1)
            except RuntimeError as e: # Catch other potential runtime errors
                if debug_mode:
                    print(f"Failed to run demo (RuntimeError): {e}")
                print(f"Error: An unexpected error occurred while running demo: {str(e)}")
                sys.exit(1)
        else:
            # Create a context object with debug mode
            obj = {'DEBUG': debug_mode}

            # Pass the context object to the CLI
            CLI(obj=obj)
    else:
        print("Error: CLI function could not be loaded.")
        sys.exit(1)
