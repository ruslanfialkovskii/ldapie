# LDAPie Release Workflow (Improved)
#
# This workflow handles the release process for LDAPie, including:
# - Version validation and incrementation
# - Updating version numbers in code
# - Running tests to ensure release quality
# - Creating a GitHub release with release notes
# - Publishing to PyPI
# - Building and pushing Docker images for multiple platforms
# - Updating documentation
#
# It is designed to be triggered manually with custom inputs for release type,
# version number, and other release options.

name: LDAPie Release Workflow (Improved)

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release to create'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      version:
        description: 'Specify exact version (optional, leave empty for auto-increment)'
        required: false
        type: string
      pre_release:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release?'
        required: false
        default: false
        type: boolean
      changelog_message:
        description: 'Custom changelog entry (optional)'
        required: false
        type: string

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      current_version: ${{ steps.get_current_version.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use a PAT instead of GITHUB_TOKEN

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Get current version
        id: get_current_version
        run: |
          current_version=$(python -c "from ldapie import __version__; print(__version__)")
          echo "current_version=${current_version}" >> $GITHUB_OUTPUT
          echo "Current version: ${current_version}"

      - name: Bump version
        id: bump_version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            echo "Using specified version: ${{ inputs.version }}"
            new_version="${{ inputs.version }}"
          else
            echo "Calculating new version based on release type: ${{ inputs.release_type }}"
            if [ "${{ inputs.release_type }}" == "patch" ]; then
              python scripts/bump_version.py patch --dry-run
              new_version=$(python scripts/bump_version.py patch --dry-run | grep "New version:" | awk '{print $3}')
            elif [ "${{ inputs.release_type }}" == "minor" ]; then
              python scripts/bump_version.py minor --dry-run
              new_version=$(python scripts/bump_version.py minor --dry-run | grep "New version:" | awk '{print $3}')
            elif [ "${{ inputs.release_type }}" == "major" ]; then
              python scripts/bump_version.py major --dry-run
              new_version=$(python scripts/bump_version.py major --dry-run | grep "New version:" | awk '{print $3}')
            else
              echo "Invalid release type: ${{ inputs.release_type }}"
              exit 1
            fi
          fi
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT
          echo "New version will be: ${new_version}"

      - name: Update version numbers
        run: |
          if [ -n "${{ inputs.changelog_message }}" ]; then
            python scripts/bump_version.py ${{ inputs.release_type }} --changelog-message "${{ inputs.changelog_message }}"
          else
            python scripts/bump_version.py ${{ inputs.release_type }}
          fi
          
          # Verify the version was updated correctly
          updated_version=$(python -c "from ldapie import __version__; print(__version__)")
          echo "Updated version in code: ${updated_version}"
          if [ "${updated_version}" != "${{ steps.bump_version.outputs.new_version }}" ]; then
            echo "Version mismatch: ${updated_version} != ${{ steps.bump_version.outputs.new_version }}"
            exit 1
          fi

      - name: Commit version changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          
          # Use the token explicitly in the push commands
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main
          git push origin "v${{ steps.bump_version.outputs.new_version }}"

  test-release:
    name: Test Release
    needs: prepare-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "v${{ needs.prepare-release.outputs.new_version }}"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with pytest
        run: pytest --cov=src tests/

      - name: Test package installation
        run: |
          pip install -e .
          python -c "import ldapie; print(ldapie.__version__)"

  build-package:
    name: Build Python Package
    needs: [prepare-release, test-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "v${{ needs.prepare-release.outputs.new_version }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 7

  publish-package:
    name: Publish to PyPI
    needs: [prepare-release, build-package]
    runs-on: ubuntu-latest
    environment: PyPI
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: List package files
        run: ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  build-docker:
    name: Build and Push Docker Image
    needs: [prepare-release, test-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "v${{ needs.prepare-release.outputs.new_version }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push multi-platform images
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ruslanfialkovsky/ldapie:latest
            ruslanfialkovsky/ldapie:${{ needs.prepare-release.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [prepare-release, publish-package, build-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "v${{ needs.prepare-release.outputs.new_version }}"
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use personal access token

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Extract changelog entry
        id: extract_changelog
        run: |
          awk "/## ${{ needs.prepare-release.outputs.new_version }}/ {flag=1;next} /^## / {flag=0} flag" CHANGELOG.md > release_notes.txt
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # Use personal access token
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          name: Release v${{ needs.prepare-release.outputs.new_version }}
          body: |
            # LDAPie v${{ needs.prepare-release.outputs.new_version }}
            
            ${{ env.RELEASE_NOTES }}
            
            ## Installation
            
            ```bash
            pip install ldapie==${{ needs.prepare-release.outputs.new_version }}
            ```
            
            ## Docker
            
            ```bash
            docker pull ruslanfialkovsky/ldapie:${{ needs.prepare-release.outputs.new_version }}
            ```
            
            ## Changes
            
            Version ${{ needs.prepare-release.outputs.new_version }} from ${{ needs.prepare-release.outputs.current_version }}
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.pre_release }}
          files: |
            dist/*
          fail_on_unmatched_files: true
