# LDAPie Continuous Integration and Development Workflow
# 
# This workflow handles continuous integration testing and verification of code quality.
# It runs on all pushes to main/master branches and pull requests.
# 
# Note: Publishing to PyPI and Docker Hub is handled by the dedicated release workflow
# (release.yml) which is triggered manually when creating a new release.

name: LDAPie CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install isort black flake8 pylint

      - name: Check formatting with black
        run: black --check src tests
        continue-on-error: true

      - name: Check imports with isort
        run: isort --check-only --profile=black src tests
        continue-on-error: true

      - name: Lint with flake8
        run: flake8 src tests
        continue-on-error: true

      - name: Lint with pylint
        run: pylint src tests
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: check
    if: always() && !cancelled()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with pytest
        run: pytest --cov=src tests/

  build-pip:
    name: Build Python Package
    needs: [test]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*
        
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 7
  build-docker:
    name: Build and Verify Docker Image
    needs: [test]
    runs-on: ubuntu-latest
    if: success() && (github.event_name != 'pull_request')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image (without pushing)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ruslanfialkovsky/ldapie:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max
