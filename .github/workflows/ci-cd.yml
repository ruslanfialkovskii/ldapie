name: LDAPie CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install isort black flake8 pylint

      - name: Check formatting with black
        run: black --check src tests
        continue-on-error: true

      - name: Check imports with isort
        run: isort --check-only --profile=black src tests
        continue-on-error: true

      - name: Lint with flake8
        run: flake8 src tests
        continue-on-error: true

      - name: Lint with pylint
        run: pylint src tests
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: check
    if: always() && !cancelled()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with pytest
        run: pytest --cov=src tests/

  build:
    name: Build Docker Image
    needs: [test]
    runs-on: ubuntu-latest
    if: success() && (github.event_name != 'pull_request')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ruslanfialkovsky/ldapie
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish:
    name: Publish Docker Image as Latest
    needs: [build]
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push latest Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ruslanfialkovsky/ldapie:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
